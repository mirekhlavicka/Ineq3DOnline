@model Ineq3DOnline.Models.IneqMeshViewModel

<!-- Modal -->
<div class="modal fade" id="modalCreateMesh" role="dialog" style="overflow:hidden">
    <div class="modal-dialog cm-dialog">

        <form role="form" id="formCreateMesh">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Create mesh</h4>
                </div>
                <div class="modal-body" style="min-height:285px">

                    <div class="tabbable">
                        <!-- Only required for left/right tabs -->
                        <ul class="nav nav-tabs">
                            <li class="active"><a href="#tab1" data-toggle="tab">Inequalities</a></li>
                            <li><a href="#tab2" data-toggle="tab">Quality</a></li>
                            <li><a href="#tab3" data-toggle="tab">Box</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active" id="tab1">
                                @Html.TextAreaFor(m => Model.Formula, new { @class = "form-control", style = "display: none; height:700px; margin-top: 10px", spellcheck = "false" })
                                @Html.ValidationMessageFor(model => model.Formula, "", new { @class = "text-danger" })

                                <div class="btn-toolbar" role="toolbar" aria-label="..." style="margin-top:15px">
                                    <div class="btn-group">
                                        <button type="button" class="btn btn-primary btn-xs" id="btnClearFormula">Clear</button>
                                    </div>
                                </div>
                            </div>
                            <div class="tab-pane" id="tab2">
                                <div class="panel panel-default" style="margin-top:10px; min-height:200px">
                                    <div class="panel-body">
                                        <div class="row">
                                            @Html.LabelFor(m => Model.MaxDivisionCount, htmlAttributes: new { @class = "control-label col-xs-3" })
                                            <div class="col-xs-9">
                                                @Html.EditorFor(m => Model.MaxDivisionCount, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.MaxDivisionCount, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="row" style="margin-top:20px">
                                            <div class="col-xs-offset-3 col-xs-9">
                                                <div class="checkbox">
                                                    @Html.CheckBoxFor(m => Model.Quality)
                                                    @Html.LabelFor(m => Model.Quality)
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row" style="margin-top:20px">
                                            <div class="col-xs-offset-3 col-xs-9">
                                                <div class="checkbox">
                                                    @Html.CheckBoxFor(m => Model.CurvatureQuality)
                                                    @Html.LabelFor(m => Model.CurvatureQuality)
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="tab-pane" id="tab3">
                                <div class="panel panel-default bounding-box" style="margin-top:10px; min-height:200px">
                                    <div class="panel-body">
                                        <div class="row">
                                            <div class="form-inline col-xs-6">
                                                @Html.LabelFor(m => Model.X0, htmlAttributes: new { @class = "control-label" })
                                                @Html.EditorFor(m => Model.X0, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.X0, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-inline col-xs-6">
                                                @Html.LabelFor(m => Model.X1, htmlAttributes: new { @class = "control-label" })
                                                @Html.EditorFor(m => Model.X1, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.X1, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="form-inline col-xs-6">
                                                @Html.LabelFor(m => Model.Y0, htmlAttributes: new { @class = "control-label" })
                                                @Html.EditorFor(m => Model.Y0, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Y0, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-inline col-xs-6">
                                                @Html.LabelFor(m => Model.Y1, htmlAttributes: new { @class = "control-label" })
                                                @Html.EditorFor(m => Model.Y1, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Y1, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="form-inline col-xs-6">
                                                @Html.LabelFor(m => Model.Z0, htmlAttributes: new { @class = "control-label" })
                                                @Html.EditorFor(m => Model.Z0, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Z0, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-inline col-xs-6">
                                                @Html.LabelFor(m => Model.Z1, htmlAttributes: new { @class = "control-label" })
                                                @Html.EditorFor(m => Model.Z1, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Z1, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
                <div class="modal-footer" style="display:flex">
                    <div style="display: inline-block; flex-grow: 1; text-align: left;">

                        <input type="checkbox" title="Save JSON data" id="chckSaveJSON" checked="checked" />
                        <input type="checkbox" title="Save PLY data" id="chckSavePLY" checked="checked" />

                        @Html.EditorFor(m => Model.Name, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Enter name to save", style = "display: inline-block; width: 200px" } })
                        <button type="button" class="btn btn-primary btn-sm" id="btnSaveMesh" style="margin-bottom: 3px">Save</button>
                    </div>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" @*data-dismiss="modal"*@ id="btnCreateMesh">Create</button>
                </div>
            </div>
        </form>
    </div>
</div>

<script>
    var cmFormula = null;

    $('#modalCreateMesh').on('shown.bs.modal', function () {
        if (!cmFormula) {
            cmFormula = CodeMirror.fromTextArea($('#Formula')[0], {
                mode: 'text/x-csharp',
                lineNumbers: true,
                lineWrapping: false,
                matchBrackets: true,
                autoCloseBrackets: true,
                foldGutter: true,
                gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"]
            });
            cmFormula.setSize("100%", "calc(100vh - 350px)");
            makeDraggable($("#modalCreateMesh")[0]);
        } else {
            cmFormula.setValue($('#Formula').val());
            cmFormula.refresh();
        }
        cmFormula.focus();
    })

    $('#modalCreateMesh a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        if (cmFormula) {
            cmFormula.refresh();
            cmFormula.focus();
        }
    })

    function makeDraggable(modal) {
        let offsetX = 0, offsetY = 0, isDragging = false;

        const modalDialog = modal.querySelector(".modal-dialog"); // Drag the modal-dialog
        const header = modal.querySelector(".modal-header"); // Dragging starts from header

        if (!modalDialog || !header) return; // Ensure elements exist

        const dragMouseDown = (e) => {
            e.preventDefault();

            // Get initial cursor position
            offsetX = e.clientX - modalDialog.getBoundingClientRect().left;
            offsetY = e.clientY - modalDialog.getBoundingClientRect().top;

            isDragging = true;

            document.addEventListener("mousemove", elementDrag);
            document.addEventListener("mouseup", closeDragElement);
        };

        const elementDrag = (e) => {
            if (!isDragging) return;

            e.preventDefault();

            // Calculate new position
            let newX = e.clientX - offsetX;
            let newY = e.clientY - offsetY;

            // Ensure modal stays within screen bounds
            //newX = Math.max(0, Math.min(window.innerWidth - modalDialog.offsetWidth, newX));
            //newY = Math.max(0, Math.min(window.innerHeight - modalDialog.offsetHeight, newY));

            // Apply new position
            modalDialog.style.position = "absolute";
            modalDialog.style.margin = "0"; // Fix Bootstrap margins
            modalDialog.style.left = `${newX}px`;
            modalDialog.style.top = `${newY}px`;
            modalDialog.style.transform = "none"; // Remove Bootstrap centering
        };

        const closeDragElement = () => {
            isDragging = false;
            document.removeEventListener("mousemove", elementDrag);
            document.removeEventListener("mouseup", closeDragElement);
        };

        // Make modal draggable by clicking on the header
        header.style.cursor = "move";
        header.addEventListener("mousedown", dragMouseDown);
    }

</script>

<style>
    @@media (min-width: 768px){
    .cm-dialog {
        max-width: 1200px;
        width: calc(100vw - 100px);
    }
               }
</style>