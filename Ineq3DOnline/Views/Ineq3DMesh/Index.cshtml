@model Ineq3DOnline.MeshSamples

@{

    ViewBag.Title = "Ineq3D Online";
    Layout = "_LayoutThree.cshtml";
}

@{ 
    var defaultModel = Ineq3DOnline.Models.IneqMeshViewModel.DefaultModel();
    Html.RenderPartial("_CreateMeshDialog", defaultModel);
}

@section Samples
{
    <li class="dropdown">
        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Samples<span class="caret"></span></a>
        <ul class="dropdown-menu">

            @foreach (var m in Model.Samples)
            {
                <li>@Html.ActionLink(m, "GetMesh", "Ineq3DMesh", new { Mesh = m }, htmlAttributes: new { data_mesh = "" })</li>
            }
        </ul>
    </li>
}

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $.validator.setDefaults({
            ignore: ""
        });
    </script>

    <script>
        var sampleIndex = @defaultModel.SampleIndex;
        var camera, scene, renderer, controls, geometry, material, mesh, bbox;
        var rotation_x = 0;
        var rotation_y = 0;
        var currentMeshUrl = '@Url.Action("GetMesh", "Ineq3DMesh", new { Mesh = ViewBag.CurrentMesh })';
        var spinner;

        var init = function () {
            var width = window.innerWidth;
            var height = window.innerHeight;

            camera = new THREE.PerspectiveCamera(60, width / height, 0.01, 1e10);
            camera.position.z = 2.2;

            scene = new THREE.Scene();
            scene.add(camera);

            var dirLight = new THREE.DirectionalLight(0xffffff);
            dirLight.position.set(200, 200, 1000).normalize();
            camera.add(dirLight);
            camera.add(dirLight.target);


            if(webglAvailable()){
                renderer = new THREE.WebGLRenderer({ antialias: true });
                renderer.setPixelRatio(window.devicePixelRatio);
            } else {
                renderer = new THREE.CanvasRenderer({ antialias: true });
                $('#chckAutoRotate').prop('checked', false)
                //renderer.setPixelRatio(window.devicePixelRatio); //not working with CanvasRenderer
            }


            renderer.setSize(width, height);
            $('body').append(renderer.domElement);

            controls = new THREE.TrackballControls(camera, renderer.domElement);
            controls.rotateSpeed = 5.0;
            controls.zoomSpeed = 5;
            controls.panSpeed = 2;
            controls.noZoom = false;
            controls.noPan = false;
            controls.staticMoving = false;
            controls.dynamicDampingFactor = 0.3;
        }

        var refreshGeometry = function (newGeometry) {

            if (newGeometry && newGeometry.faces.length > 0) {
                geometry = newGeometry;
                geometry.normalize();
                geometry.computeFaceNormals();
            } else if (newGeometry && newGeometry.faces.length == 0) {
                alert('You must first create custom mesh.');
            }

            if ($('#chckSmooth').prop('checked')) {
                if (geometry.faces[0].vertexNormals.length == 0) {
                    geometry.computeVertexNormals();
                    if (!newGeometry) {
                        geometry = geometry.clone();
                    }
                }
            } else {
                if (geometry.faces[0].vertexNormals.length != 0) {
                    for (var i = 0; i < geometry.faces.length; i++) {
                        geometry.faces[i].vertexNormals = []; // remove vertex normals
                    }
                    if (!newGeometry) {
                        geometry = geometry.clone();
                    }
                }
            }

            if (mesh) {
                rotation_x = mesh.rotation.x;
                rotation_y = mesh.rotation.y;
            }

            clearScene();

            var renderStyle = parseInt($('input[name=radioRenderStyle]:checked').val());
            var mat = parseInt($('input[name=radioMaterial]:checked').val());

            switch(mat) {
                case 0:
                    material = new THREE.MeshPhongMaterial({ 
                        polygonOffset: true,
                        polygonOffsetFactor: 1, // positive value pushes polygon further away
                        polygonOffsetUnits: 1, 
                        vertexColors: THREE.VertexColors, 
                        specular: 0x111111, 
                        shininess: 70, 
                        side: $('#chckDoubleSide').prop('checked') ? THREE.DoubleSide : THREE.FrontSide, 
                        shading: $('#chckSmooth').prop('checked') || renderStyle == 1 ? THREE.SmoothShading : THREE.FlatShading, 
                        wireframe: renderStyle == 1 });
                    break;
                case 1:
                    material = new THREE.MeshLambertMaterial({
                        polygonOffset: true,
                        polygonOffsetFactor: 1, // positive value pushes polygon further away
                        polygonOffsetUnits: 1,                         
                        vertexColors: THREE.VertexColors, 
                        side: $('#chckDoubleSide').prop('checked') ? THREE.DoubleSide : THREE.FrontSide, 
                        wireframe: renderStyle == 1/*, opacity: 0.5, color: 0x44ff44, transparent: true*/ });
                    break;
                case 2:
                    material = new THREE.MeshNormalMaterial({
                        polygonOffset: true,
                        polygonOffsetFactor: 1, // positive value pushes polygon further away
                        polygonOffsetUnits: 1,                         
                        side: $('#chckDoubleSide').prop('checked') ? THREE.DoubleSide : THREE.FrontSide, 
                        wireframe: renderStyle == 1 });
                    break;
            }

            mesh = new THREE.Mesh(geometry, material);
            scene.add(mesh);

            if (renderStyle == 2) {
                edges = new THREE.WireframeHelper(mesh, 0x000000);
                scene.add(edges);
            }

            if ($('#chckBoundingBox').prop('checked')) {
                bbox = new THREE.BoundingBoxHelper(mesh, 0xff0000);
                bbox.material = new THREE.MeshLambertMaterial({ color: 0xffffff, opacity: 0.25, transparent: true });
                bbox.update();
                bbox.scale.x = 1.02 * bbox.scale.x;
                bbox.scale.y = 1.02 * bbox.scale.y;
                bbox.scale.z = 1.02 * bbox.scale.z;
                mesh.add(bbox);
            }

            mesh.rotation.x = rotation_x;
            mesh.rotation.y = rotation_y;

            hideSpinner();
        }

        var loadMesh = function (url) {
            showSpinner();
            currentMeshUrl = url;
            var loader = new THREE.PLYLoader();
            loader.load(url, refreshGeometry);
        }

        var clearScene = function () {
            for (var i = 0; i < scene.children.length; i++) {
                var current = scene.children[i];
                if (current instanceof THREE.Mesh || current instanceof THREE.WireframeHelper) {
                    current.geometry.dispose();
                    scene.remove(current);
                    i--;
                }
            }
        }

        var render = function () {
            requestAnimationFrame(render);
            controls.update();

            if (mesh && $('#chckAutoRotate').prop('checked')) {
                mesh.rotation.x += 0.005;
                mesh.rotation.y += 0.01;
            }

            renderer.render(scene, camera);
        }

        var onWindowResize = function () {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        $(function () {
            init();
            render();
            loadMesh(currentMeshUrl);
            $(window).resize(onWindowResize);
            $("textarea").getTab();

            $('#lnkResetCamera').click(function (e) {
                controls.reset();
            });

            $('#btnCreateMesh').click(function (e) {
                $('#formCreateMesh').validate();
                if ($('#formCreateMesh').valid()) {
                    $.post('@Url.Action("SetIneqMesh")',
                        $('#formCreateMesh').serialize(),
                        function (data) {
                            if (data.success) {
                                $('#modalCreateMesh').modal('hide');
                                loadMesh('@Url.Action("GetCustomMesh", "Ineq3DMesh", /*new { Mesh = "[custom]" }*/null)' + '?ts=' + $.now());
                            } else {
                                $("[data-valmsg-for='Formula']").text(data.message)
                            }
                        });
                }
                //e.preventDefault();
                //return false;
            })

            $('#btnClearFormula').click(function (e) {
                $('#Formula').val('');
            });

            $('#btnNextSampleFormula').click(function (e) {
                sampleIndex++;
                $.post('@Url.Action("GetSampleFormula", "Ineq3DMesh")',
                    {sampleIndex: sampleIndex},
                    function( data ) {
                        $('#Formula').val(data.formula);
                });
            });


            $('#lnkImproveMeshQuality').click(function (e) {
                loadMesh('@Url.Action("GetCustomMeshImproveQuality", "Ineq3DMesh", new { boundary = false })' + '&ts=' + $.now());
            });

            $('#lnkImproveBoundaryMeshQuality').click(function (e) {
                loadMesh('@Url.Action("GetCustomMeshImproveQuality", "Ineq3DMesh", new {boundary = true })' + '&ts=' + $.now());
            });


            $('#lnkImproveMeshCurvatureQuality').click(function (e) {
                loadMesh('@Url.Action("GetCustomMeshImproveCurvatureQuality", "Ineq3DMesh", null)' + '?ts=' + $.now());
            });

            $('#lnkImproveMeshJiggle').click(function (e) {
                loadMesh('@Url.Action("GetCustomMeshJiggle", "Ineq3DMesh", null)' + '?ts=' + $.now());
            });
        });


        $(document).on('click', 'a[data-mesh]', function (e) {
            loadMesh(this.href);
            return false;
        });

        $('input[name=radioRenderStyle],input[name=radioMaterial],#chckSmooth,#chckDoubleSide,#chckBoundingBox').on('change', function () {
            //loadMesh(currentMeshUrl);
            refreshGeometry();
        });

        function showSpinner() {

            if(!spinner){
                var opts = {
                    lines: 13, // The number of lines to draw
                    length: 20, // The length of each line
                    width: 10, // The line thickness
                    radius: 30, // The radius of the inner circle
                    corners: 1, // Corner roundness (0..1)
                    rotate: 0, // The rotation offset
                    direction: 1, // 1: clockwise, -1: counterclockwise
                    color: '#ffffff', // #rgb or #rrggbb or array of colors
                    speed: 1, // Rounds per second
                    trail: 60, // Afterglow percentage
                    shadow: false, // Whether to render a shadow
                    hwaccel: false, // Whether to use hardware acceleration
                    className: 'spinner', // The CSS class to assign to the spinner
                    zIndex: 2e9, // The z-index (defaults to 2000000000)
                    top: 'auto', // Top position relative to parent in px
                    left: 'auto' // Left position relative to parent in px
                };
                spinner = new Spinner(opts);
            }
            var target = $('body').get(0); //document.getElementById('WebGL-output');

            spinner.spin(target);
        }

        function hideSpinner() {
            if (spinner) {
                spinner.stop();
            }
        }

        function webglAvailable() {
            try {
                var canvas = document.createElement("canvas");
                return !!
                    window.WebGLRenderingContext &&
                    (canvas.getContext("webgl") ||
                        canvas.getContext("experimental-webgl"));
            } catch(e) {
                return false;
            }
        }

        $.fn.getTab = function () {
            this.keydown(function (e) {
                if (e.keyCode === 9) {
                    var val = this.value,
                        start = this.selectionStart,
                        end = this.selectionEnd;
                    this.value = val.substring(0, start) + '\t' + val.substring(end);
                    this.selectionStart = this.selectionEnd = start + 1;
                    return false;
                }
                return true;
            });
            return this;
        };
    </script>
}
