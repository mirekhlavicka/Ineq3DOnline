@model Ineq3DOnline.MeshSamples

@{

    ViewBag.Title = "Ineq3D Online";
    //Layout = "_LayoutThree.cshtml";
}

@{
    var defaultModel = Ineq3DOnline.Models.IneqMeshViewModel.DefaultModel();
    Html.RenderPartial("_CreateMeshDialog", defaultModel);
    Html.RenderPartial("_SetUFuncDialog", defaultModel);
}

@section Samples
{
    <li class="dropdown">
        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Samples<span class="caret"></span></a>
        <ul class="dropdown-menu">

            @foreach (var m in Model.Samples)
            {
                <li><a href="#" data-mesh="@m">@m</a></li>
            }
        </ul>
    </li>
}

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")

<script type="x-shader/x-vertex" id="vertexShaderLevels">

    //attribute float val;
    //varying float vVal;
    varying vec2 vUv;

    void main() {

        //vVal = val;
        vUv = uv;

        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
        gl_Position.z -=0.001;
    }
</script>

<script type="x-shader/x-fragment" id="fragmentShaderLevels">

    uniform float levels[15];
    varying vec2 vUv;

    float levelFactor() {
        float d = fwidth( vUv.y );
        float result = 1.0;

        for (int i = 0; i < 15; ++i) {
            float v = smoothstep( 0.0 ,  d * 1.2, abs(vUv.y - levels[i]) );
            if(v < result){
                result = v;
            }
        }

        return result;
    }

    void main() {
        gl_FragColor.rgb = vec3(0.0);
        gl_FragColor.a = mix(0.5, 0.0, levelFactor());
    }

</script>

<script type="x-shader/x-fragment" id="fragmentShaderLevelsWithColor">

    uniform float levels[15];
    varying vec2 vUv;

    vec2 levelFactor() {
    float d = fwidth( vUv.y );

    vec2 result = vec2(1.0, -1.0);
    for (int i = 0; i < 15; ++i) {
    float v = smoothstep( 0.0 ,  d * 1.2, abs(vUv.y - levels[i]) );
    if(v < result[0]){
    result[0] = v;
    }

    if(levels[i] > vUv.y && result[1] < 0.0){
    result[1] = float(i) / 10.0;
    }
    }
    return result;
    }

    void main() {

    vec2 lev = levelFactor();
    //gl_FragColor.rgb = mix( vec3( 0.0 ), mix(vec3(1.0,0.0,0.0), vec3(0.0,0.0,1.0), lev[1]), lev[0] );
    gl_FragColor.rgb = vec3( 0.0 );
    gl_FragColor.a = mix(0.5, 0.0, lev[0] );
    }

</script>

    <script type="text/javascript">
        $.validator.setDefaults({
            ignore: ""
        });
    </script>

    <script>
        var sampleIndex = @defaultModel.SampleIndex;
        var sampleUFuncIndex = @defaultModel.SampleUFuncIndex;
        var currentMeshName = '@ViewBag.CurrentMesh';

        var camera, scene, renderer, controls, geometry, material, mesh, bbox;
        var rotation_x = 0;
        var rotation_y = 0;

        var spinner;
        var texture;
        var expr = null;

        var init = function () {
            var width = window.innerWidth;
            var height = window.innerHeight;

            camera = new THREE.PerspectiveCamera(60, width / height, 0.1, 1e4);
            camera.position.z = 2.2;

            scene = new THREE.Scene();
            scene.add(camera);

            var dirLight = new THREE.DirectionalLight(0xffffff);
            dirLight.position.set(200, 200, 1000).normalize();
            camera.add(dirLight);
            camera.add(dirLight.target);


            if(webglAvailable()){
                renderer = new THREE.WebGLRenderer({ antialias: true });
                renderer.setPixelRatio(window.devicePixelRatio);
            } else {
                renderer = new THREE.CanvasRenderer({ antialias: true });
                $('#chckAutoRotate').prop('checked', false)
                //renderer.setPixelRatio(window.devicePixelRatio); //not working with CanvasRenderer
            }

            renderer.sortObjects = false;

            renderer.setSize(width, height);
            $('body').append(renderer.domElement);

            controls = new THREE.TrackballControls(camera, renderer.domElement);
            controls.rotateSpeed = 5.0;
            controls.zoomSpeed = 5;
            controls.panSpeed = 2;
            controls.noZoom = false;
            controls.noPan = false;
            controls.staticMoving = false;
            controls.dynamicDampingFactor = 0.3;

            //expr = Parser.parse("sin(6 * x - t) + sin(6 * y - t) + sin(6 * z - t)");

            texture = new THREE.TextureLoader().load('@VirtualPathUtility.ToAbsolute("~/Content/img/scale1024.png")');
            texture.wrapS =  THREE.ClampToEdgeWrapping; //THREE.RepeatWrapping;
            texture.wrapT =  THREE.ClampToEdgeWrapping; //THREE.RepeatWrapping;
            texture.magFilter = THREE.LinearFilter; //NearestFilter;
            texture.minFilter = THREE.LinearFilter; //NearestFilter;
        }

        var t=0.0;
        var dt = 0.02;
        var assignUVs = function(){

            if(!expr){
                return;
            }

            t += dt;

            if(!geometry.faceVertexUvs[0]){
                geometry.faceVertexUvs[0] = [];
            }

            var faces = geometry.faces;

            var vals = [];

            var max = -Number.MAX_VALUE;
            var min = Number.MAX_VALUE;

            for (i = 0; i < geometry.vertices.length ; i++) {
                var v = geometry.vertices[i];
                var fv =  expr.evaluate({ x: v.x, y: v.y, z: v.z, t: t });

                if(fv < min){
                    min = fv;
                }

                if(fv > max){
                    max = fv;
                }

                vals.push(fv);
            }

            for (i = 0; i < vals.length ; i++) {
                vals[i] = (vals[i] - min)/(max - min);
            }

            if(geometry.faceVertexUvs[0].length == 0) {
                for (i = 0; i < geometry.faces.length ; i++) {
                    geometry.faceVertexUvs[0].push([
                        new THREE.Vector2(0, vals[faces[i].a] ),
                        new THREE.Vector2(0, vals[faces[i].b] ),
                        new THREE.Vector2(0, vals[faces[i].c] )
                    ]);
                }
            } else {
                for (i = 0; i < geometry.faces.length ; i++) {
                    geometry.faceVertexUvs[0][i][0].set(0, vals[faces[i].a]);
                    geometry.faceVertexUvs[0][i][1].set(0, vals[faces[i].b]);
                    geometry.faceVertexUvs[0][i][2].set(0, vals[faces[i].c]);
                }
            }

            geometry.uvsNeedUpdate = true;
        }

        var refreshGeometry = function (newGeometry) {

            if (newGeometry && newGeometry.faces.length > 0) {
                geometry = newGeometry;
                geometry.normalize();
                geometry.computeFaceNormals();
            } else if (newGeometry && newGeometry.faces.length == 0) {
                alert('You must first create custom mesh.');
            } else if (!newGeometry) {
                geometry = geometry.clone();
            }

            if ($('#chckSmooth').prop('checked')) {
                if (geometry.faces[0].vertexNormals.length == 0) {
                    geometry.computeVertexNormals();
                    //if (!newGeometry) {
                    //    geometry = geometry.clone();
                    //}
                }
            } else {
                if (geometry.faces[0].vertexNormals.length != 0) {
                    for (var i = 0; i < geometry.faces.length; i++) {
                        geometry.faces[i].vertexNormals = []; // remove vertex normals
                    }
                    //if (!newGeometry) {
                    //    geometry = geometry.clone();
                    //}
                }
            }

            if(expr){
                assignUVs();
            }

            if (mesh) {
                rotation_x = mesh.rotation.x;
                rotation_y = mesh.rotation.y;
            }

            clearScene();

            var renderStyle = parseInt($('input[name=radioRenderStyle]:checked').val());
            var levelStyle = parseInt($('input[name=radioLevels]:checked').val());
            var mat = parseInt($('input[name=radioMaterial]:checked').val());

            switch(mat) {
                case 0:
                    material = new THREE.MeshPhongMaterial({
                        polygonOffset: true,
                        polygonOffsetFactor: 1, // positive value pushes polygon further away
                        polygonOffsetUnits: 1,
                        vertexColors: expr && levelStyle != 1 ? THREE.NoColors : THREE.VertexColors,
                        color: 0xffffff,
                        map: expr && levelStyle != 1  ?  texture : null,
                        specular: 0x111111,
                        shininess: 70,
                        side: $('#chckDoubleSide').prop('checked') ? THREE.DoubleSide : THREE.FrontSide,
                        shading: $('#chckSmooth').prop('checked') || renderStyle == 1 ? THREE.SmoothShading : THREE.FlatShading,
                        wireframe: renderStyle == 1 });
                    break;
                case 1:
                    material = new THREE.MeshLambertMaterial({
                        polygonOffset: true,
                        polygonOffsetFactor: 1, // positive value pushes polygon further away
                        polygonOffsetUnits: 1,
                        vertexColors: expr ? THREE.NoColors : THREE.VertexColors,
                        color: 0xffffff,
                        map: expr ?  texture : null,
                        side: $('#chckDoubleSide').prop('checked') ? THREE.DoubleSide : THREE.FrontSide,
                        wireframe: renderStyle == 1/*, opacity: 0.5, color: 0x44ff44, transparent: true*/ });
                    break;
                case 2:
                    material = new THREE.MeshNormalMaterial({
                        polygonOffset: true,
                        polygonOffsetFactor: 1, // positive value pushes polygon further away
                        polygonOffsetUnits: 1,
                        side: $('#chckDoubleSide').prop('checked') ? THREE.DoubleSide : THREE.FrontSide,
                        wireframe: renderStyle == 1 });
                    break;
            }

            mesh = new THREE.Mesh(geometry, material);
            scene.add(mesh);

            if (renderStyle == 2) {
                edges = new THREE.WireframeHelper(mesh, 0x000000);
                edges.material.opacity = 0.35;
                edges.material.transparent = true;
                edges.matrix = new THREE.Matrix4();
                //edges.matrixAutoUpdate  = true;
                mesh.add(edges);
                //scene.add(edges);
            }

            if(expr && levelStyle != 2){
                var materiall = new THREE.ShaderMaterial( {
                    uniforms : { "levels": { type: "fv1", value: [1.0 / 16.0, 2.0 / 16.0, 3.0 / 16.0, 4.0 / 16.0, 5.0 / 16.0, 6.0 / 16.0, 7.0 / 16.0, 8.0 / 16.0, 9.0 / 16.0, 10.0 / 16.0, 11.0 / 16.0, 12.0 / 16.0, 13.0 / 16.0, 14.0 / 16.0, 15.0 / 16.0  ] } },
                    vertexShader: document.getElementById( 'vertexShaderLevels' ).textContent,
                    fragmentShader: document.getElementById('fragmentShaderLevels').textContent,
                    transparent: true,
                    //opacity: 1.0,
                    derivatives: true
                } );

                mesh.add(new THREE.Mesh(geometry, materiall));
            }

            if ($('#chckBoundingBox').prop('checked')) {
                bbox = new THREE.BoundingBoxHelper(mesh, 0xff0000);
                bbox.material = new THREE.MeshLambertMaterial({ color: 0xffffff, opacity: 0.25, transparent: true });
                bbox.update();
                bbox.scale.x = 1.02 * bbox.scale.x;
                bbox.scale.y = 1.02 * bbox.scale.y;
                bbox.scale.z = 1.02 * bbox.scale.z;
                mesh.add(bbox);
            }

            mesh.rotation.x = rotation_x;
            mesh.rotation.y = rotation_y;

            hideSpinner();
        }

        var loadMesh = function (postRefresh) {
            showSpinner();
            var loader = new THREE.PLYLoader();
            loader.load('@Url.Action("GetMesh", "Ineq3DMesh")' + '?ts=' + $.now(), function (newGeometry) { refreshGeometry(newGeometry); if (postRefresh) { postRefresh(); } });
        }

        var clearScene = function () {
            for (var i = 0; i < scene.children.length; i++) {
                var current = scene.children[i];
                if (current instanceof THREE.Mesh || current instanceof THREE.WireframeHelper) {
                    current.geometry.dispose();
                    scene.remove(current);
                    i--;
                }
            }
        }

        var count = 0;
        var dangle = 0.004;
        var start_dangle = 0;
        var render = function () {
            count++;
            requestAnimationFrame(render);
            controls.update();

            if (mesh && $('#chckAutoRotate').prop('checked')) {
                mesh.rotation.x += dangle;
                mesh.rotation.y += 2 * dangle;
            } else if (mesh && start_dangle > 0) {
                mesh.rotation.x += start_dangle;
                mesh.rotation.y += 2 * start_dangle;
                start_dangle -= 0.0001;
            }

            if (mesh && expr && (count % 2 === 0)){
                assignUVs();
            }

            renderer.render(scene, camera);
        }

        var onWindowResize = function () {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        $(function () {
            init();
            render();

            showSpinner();
            $.get('@Url.Action("SetSampleMesh")' + '?mesh=' + currentMeshName, function () {
                loadMesh(() => start_dangle = 0.006);
            });

            $(window).resize(onWindowResize);
            $("textarea").getTab();

            $('#lnkResetCamera').click(function (e) {
                controls.reset();
            });

            $('#btnCreateMesh').click(function (e) {
                $('#formCreateMesh').validate();
                if ($('#formCreateMesh').valid()) {
                    $.post('@Url.Action("SetIneqMesh")',
                        $('#formCreateMesh').serialize(),
                        function (data) {
                            if (data.success) {
                                $('#modalCreateMesh').modal('hide');
                                loadMesh(() => start_dangle = 0.006);
                            } else {
                                $("[data-valmsg-for='Formula']").text(data.message)
                            }
                        });
                }
            })

            $('#btnClearFormula').click(function (e) {
                $('#Formula').val('');
            });

            $('#btnNextSampleFormula').click(function (e) {
                sampleIndex++;
                $.post('@Url.Action("GetSampleFormula", "Ineq3DMesh")',
                    {sampleIndex: sampleIndex},
                    function( data ) {
                        $('#Formula').val(data.formula);
                    });
            });

            $('#btnClearUFunc').click(function (e) {
                $('#UFunc').val('');
            });

            $('#btnNextSampleUFunc').click(function (e) {
                sampleUFuncIndex++;
                $.post('@Url.Action("GetSampleUFunc", "Ineq3DMesh")',
                    {sampleUFuncIndex: sampleUFuncIndex},
                    function( data ) {
                        $('#UFunc').val(data.ufunc);
                    });
            });


            $('#lnkImproveMeshQuality').click(function (e) {
                showSpinner();
                $.get('@Url.Action("ImproveQuality", "Ineq3DMesh", new { boundary = false })' + '&ts=' + $.now(), function () {
                    loadMesh();
                });
            });

            $('#lnkImproveBoundaryMeshQuality').click(function (e) {
                showSpinner();
                $.get('@Url.Action("ImproveQuality", "Ineq3DMesh", new { boundary = true })' + '&ts=' + $.now(), function () {
                    loadMesh();
                });
            });


            $('#lnkImproveMeshCurvatureQuality').click(function (e) {
                showSpinner();
                $.get('@Url.Action("ImproveCurvatureQuality")' + '?ts=' + $.now(), function () {
                    loadMesh();
                });
            });

            $('#lnkImproveMeshJiggle').click(function (e) {
                showSpinner();
                $.get('@Url.Action("Jiggle")' + '?ts=' + $.now(), function () {
                    loadMesh();
                });
            });

            $('#lnkImproveMeshRefine').click(function (e) {
                showSpinner();
                $.get('@Url.Action("Refine")' + '?ts=' + $.now(), function () {
                    loadMesh();
                });
            });

            $('#btnSetUFunc').click(function (e) {

                try {
                    var ufunc = $('#UFunc').val();

                    dt =  parseFloat($('#tbdt').val());
                    t = 0.0;

                    if(!expr){
                        $("#radioRenderStyle0").prop("checked", true)
                    }

                    if(ufunc.trim() == ''){
                        expr = null;
                    } else {
                        expr = Parser.parse(ufunc);
                        var tmp = expr.evaluate({ x: 0, y: 0, z: 0, t: 0 });
                    }

                    refreshGeometry();
                    $("[data-valmsg-for='UFunc']").text('')
                }
                catch(err) {
                    //alert(err.message);
                    $("[data-valmsg-for='UFunc']").text(err.message)
                }

            });

            $(document).on('click', 'a[data-mesh]', function (e) {
                currentMeshName = $(this).data('mesh');
                showSpinner();
                $.get('@Url.Action("SetSampleMesh")' + '?mesh=' + currentMeshName, function () {
                    loadMesh(() => start_dangle = 0.006);
                });

                return false;
            });

            $('input[name=radioRenderStyle],input[name=radioMaterial],input[name=radioLevels],#chckSmooth,#chckDoubleSide,#chckBoundingBox').on('change', function () {
                refreshGeometry();
            });

            $('#lnkRotateFaster').click(function (e) {
                dangle += 0.0005;
                return false;
            });

            $('#lnkRotateSlower').click(function (e) {
                dangle -= 0.0005;
                return false;
            });

            $("#lnkDownloadMesh").attr("href", '@Url.Action("GetMesh", "Ineq3DMesh")');
            $("#lnkDownloadMeshSTL").attr("href", '@Url.Action("GetMesh", "Ineq3DMesh")' + "?stl=true");

        });

        function showSpinner() {

            if(!spinner){
                var opts = {
                    lines: 13, // The number of lines to draw
                    length: 20, // The length of each line
                    width: 10, // The line thickness
                    radius: 30, // The radius of the inner circle
                    corners: 1, // Corner roundness (0..1)
                    rotate: 0, // The rotation offset
                    direction: 1, // 1: clockwise, -1: counterclockwise
                    color: '#ffffff', // #rgb or #rrggbb or array of colors
                    speed: 1, // Rounds per second
                    trail: 60, // Afterglow percentage
                    shadow: false, // Whether to render a shadow
                    hwaccel: false, // Whether to use hardware acceleration
                    className: 'spinner', // The CSS class to assign to the spinner
                    zIndex: 2e9, // The z-index (defaults to 2000000000)
                    top: 'auto', // Top position relative to parent in px
                    left: 'auto' // Left position relative to parent in px
                };
                spinner = new Spinner(opts);
            }
            var target = $('body').get(0); //document.getElementById('WebGL-output');

            spinner.spin(target);
        }

        function hideSpinner() {
            if (spinner) {
                spinner.stop();
            }
        }

        function webglAvailable() {
            try {
                var canvas = document.createElement("canvas");
                return !!
                    window.WebGLRenderingContext &&
                    (canvas.getContext("webgl") ||
                        canvas.getContext("experimental-webgl"));
            } catch(e) {
                return false;
            }
        }

        $.fn.getTab = function () {
            this.keydown(function (e) {
                if (e.keyCode === 9) {
                    var val = this.value,
                        start = this.selectionStart,
                        end = this.selectionEnd;
                    this.value = val.substring(0, start) + '\t' + val.substring(end);
                    this.selectionStart = this.selectionEnd = start + 1;
                    return false;
                }
                return true;
            });
            return this;
        };
    </script>
}
