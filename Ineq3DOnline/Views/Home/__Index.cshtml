@{
    ViewBag.Title = "Home Page";
}

<style>
    /*body {
        margin: 0;
    }*/

    canvas {
        width: 100%;
        height: 100%;
    }
</style>

<div id="draw3d" style="margin-top:50px"></div>

@*//http://www.hanselman.com/blog/EasyAccelerated3DGamesInABrowserWithJavaScriptAndWebGLUsingThreejsOrBabylonjs.aspx
    //http://blog.teamtreehouse.com/the-beginners-guide-to-three-js
    //http://codepen.io/nickpettit/pen/nqyaK.js
    //https://github.com/mrdoob/three.js/wiki/JSON-Geometry-format-4*@
@*<script src="/examples/js/controls/TrackballControls.js"></script>
<script src="/examples/js/loaders/PLYLoader.js"></script>*@

<script>
    var camera, scene, renderer;
    var mesh;

    var width = 1024;
    var height = 768;

    $(function () {
        init();
        render();
    });

    function init() {

        camera = new THREE.PerspectiveCamera(60, width / height, 0.01, 1e10);
        camera.position.z = 2.2;

        controls = new THREE.TrackballControls(camera);

        controls.rotateSpeed = 5.0;
        controls.zoomSpeed = 5;
        controls.panSpeed = 2;

        controls.noZoom = false;
        controls.noPan = false;

        controls.staticMoving = false;
        controls.dynamicDampingFactor = 0.3;

        scene = new THREE.Scene();

        scene.add(camera);

        // light

        var dirLight = new THREE.DirectionalLight(0xffffff);
        dirLight.position.set(200, 200, 1000).normalize();

        camera.add(dirLight);
        camera.add(dirLight.target);

        var loader = new THREE.PLYLoader();
        loader.load('@Url.Action("GetMesh", "Ineq3DMesh")', function (geometry) {

            geometry.normalize();
            geometry.computeFaceNormals();
            geometry.computeVertexNormals();

            /*if (geometry.hasColors) {
                meshMaterial = new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: THREE.VertexColors });
            }*/

            var material = new THREE.MeshPhongMaterial({ /*color: 0x0055ff,*/ vertexColors: THREE.VertexColors, /*specular: 0x111111, shininess: 200,*/ side: THREE.DoubleSide, shading: THREE.SmoothShading });
            //new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: THREE.VertexColors });
            //new THREE.MeshLambertMaterial({ color: 0xffffff, side: THREE.DoubleSide });

            mesh = new THREE.Mesh(geometry, material);

            edges = new THREE.WireframeHelper(mesh, 0x000000);

            scene.add(mesh);
            scene.add(edges);

        });


        renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(width, height); //window.innerWidth, window.innerHeight
        $('#draw3d').append(renderer.domElement);

        //

        //window.addEventListener( 'resize', onWindowResize, false );

    }

    //function onWindowResize() {

    //	camera.aspect = window.innerWidth / window.innerHeight;
    //	camera.updateProjectionMatrix();
    //	renderer.setSize(window.innerWidth, window.innerHeight);
    //}

    function render() {
        requestAnimationFrame(render);
        controls.update();

        if (mesh) {
            mesh.rotation.x += 0.005;
            mesh.rotation.y += 0.01;
        }

        renderer.render(scene, camera);
    }

</script>
