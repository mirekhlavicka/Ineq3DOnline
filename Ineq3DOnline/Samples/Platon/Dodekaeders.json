{"name":"Platon\\Dodekaeders","x0":-1.0,"y0":-1.0,"z0":-1.0,"x1":1.0,"y1":1.0,"z1":1.0,"maxDivisionCount":12,"quality":false,"curvatureQuality":false,"formula":"[advanced]\r\n\r\nSignedDistance sdf = new SignedDistance(\"Dodekaeder.stl\");\r\n\r\npublic IneqTree Dodekaeder(int count, double step)\r\n{\r\n    IneqTree res = new IneqTree();\r\n\r\n    for (int i = 0; i < count; i++)\r\n    {\r\n\t\tvar ii = i;\r\n     \t res = res | (# sdf.From(x, y, z - step * ii)-0.05);\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\npublic IneqMesh GetIneqMesh()\r\n{\r\n    var res = new IneqMesh\r\n    {\r\n        X0 = -1.1,\r\n        Y0 = -1.1,\r\n        Z0 = -1.1,\r\n        X1 = 1.1,\r\n        Y1 = 1.1,\r\n        Z1 = 3,\r\n        D = 0.1d,\r\n        Boxed = true,\r\n        IneqTree =\r\n          Dodekaeder(6, 0.5) & !Cylinder(0,0,-0.4,0,0,3,0.5,2)\r\n\t};\r\n  \r\n  \t/*res.PrepareBackgroundMeshBeforeApriory = () => \r\n    {\r\n      res.RefineTetrahedralMesh(0, 10, 0.1);\r\n      res.RefineTetrahedralMesh(1, 10, 0.1);\r\n    };*/\r\n  \r\n  \treturn res;\r\n}\r\n"}