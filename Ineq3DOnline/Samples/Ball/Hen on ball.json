{"name":"Ball\\Hen on ball","x0":-1.0,"y0":-1.0,"z0":-1.0,"x1":1.0,"y1":1.0,"z1":1.0,"maxDivisionCount":12,"quality":false,"curvatureQuality":false,"formula":"[advanced]\r\n\r\nprivate SignedDistance henne = new SignedDistance(\"Henne.stl\");\r\nprivate SignedDistance hahn = new SignedDistance(\"Hahn.stl\");\r\n\r\npublic IneqTree Bird(SignedDistance which, double x, double y, double z)\r\n{\r\n    IneqTree res = new IneqTree();\r\n    Point p = new Point(x, y, z);\r\n  \r\n  \tdouble n = sqrt(x*x + y*y +z*z);\r\n  \tdouble nx = x/n;\r\n  \tdouble ny = y/n;\r\n  \tdouble nz = z/n;\r\n  \r\n    p.X += 0.3 * nx;\r\n    p.Y += 0.3 * ny;\r\n    p.Z += 0.3 * nz;\r\n\r\n    var m = ComputeBasis(nx, ny, nz, 'z');\r\n\r\n    res = res | new IneqTree((x, y, z) =>\r\n    {\r\n        Transform(ref x, ref y, ref z, p, m);\r\n\r\n        x = x * 3;\r\n        y = y * 3;\r\n        z = z * 3;\r\n\r\n        return which.From(x,y,z);\r\n    });\r\n    return res;\r\n}\r\n\r\npublic IneqMesh GetIneqMesh()\r\n{\r\n\tdouble r = 0.5d;\r\n  \r\n  \tvar res = new IneqMesh\r\n    {\r\n        X0 = -1.0,\r\n        Y0 = -1.0,\r\n        Z0 = -1.0,\r\n        X1 = 1.0,\r\n        Y1 = 1.0,\r\n        Z1 = 1.0,\r\n        D = 0.3d,\r\n        Boxed = false,\r\n        IneqTree =\r\n          Ball(0, 0, 0, 0.75d) | \r\n          Bird(henne, 0.75d, 0, 0) |\r\n          Bird(hahn, 0, 0.75d, 0)\r\n          \r\n      };\r\n  \r\n\tres.PrepareBackgroundMeshBeforeApriory = () => \r\n    {\r\n\t\tres.RefineTetrahedralMeshNearPointRedGreen(new Point[]\r\n\t\t{ \r\n          new Point(0.75d, 0, 0),\r\n          new Point(0, 0.75d, 0)\r\n\t\t}, r, 4);\r\n      \r\n    };\r\n  \r\n  \treturn res;    \r\n}"}