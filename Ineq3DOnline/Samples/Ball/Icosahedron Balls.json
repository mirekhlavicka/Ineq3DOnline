{"name":"Ball\\Icosahedron Balls","x0":-1.0,"y0":-1.0,"z0":-1.0,"x1":1.0,"y1":1.0,"z1":1.0,"maxDivisionCount":12,"quality":false,"curvatureQuality":false,"formula":"[advanced]\r\n\r\nstatic void Normalize(double[,] verts)\r\n{\r\n  for (int i = 0; i < verts.GetLength(0); i++)\r\n  {\r\n    double x = verts[i, 0];\r\n    double y = verts[i, 1];\r\n    double z = verts[i, 2];\r\n    double len = Math.Sqrt(x * x + y * y + z * z);\r\n    verts[i, 0] /= len;\r\n    verts[i, 1] /= len;\r\n    verts[i, 2] /= len;\r\n  }\r\n}\r\n\r\nprivate IneqTree Balls()\r\n{\r\n\tvar res = new IneqTree();\t\r\n\r\n    double phi = (1.0 + Math.Sqrt(5.0)) / 2.0; // golden ratio\r\n\r\n    double[,] vertices = new double[,]\r\n    {\r\n      { -1,  phi,  0 },\r\n      {  1,  phi,  0 },\r\n      { -1, -phi,  0 },\r\n      {  1, -phi,  0 },\r\n\r\n      {  0, -1,  phi },\r\n      {  0,  1,  phi },\r\n      {  0, -1, -phi },\r\n      {  0,  1, -phi },\r\n\r\n      {  phi,  0, -1 },\r\n      {  phi,  0,  1 },\r\n      { -phi,  0, -1 },\r\n      { -phi,  0,  1 }\r\n    };\r\n\r\n    // optional normalization to unit length\r\n    Normalize(vertices);\r\n\r\n    // print check\r\n    for (int i = 0; i < vertices.GetLength(0); i++)\r\n    {\r\n\t\tres = res | Ball(vertices[i,0], vertices[i,1], vertices[i,2], 0.7)      ;\r\n    }\r\n  \r\n   \treturn res;\r\n}\r\n\r\npublic IneqMesh GetIneqMesh()\r\n{\r\n    return new IneqMesh\r\n    {\r\n        X0 = -1.8,\r\n        Y0 = -1.8,\r\n        Z0 = -1.8,\r\n        X1 = 1.8,\r\n        Y1 = 1.8,\r\n        Z1 = 1.8,\r\n        D = 0.1d,\r\n        Boxed = false,\r\n        IneqTree = Balls() & !(Ball(0,0,0,1))\r\n\t};\r\n}\r\n"}