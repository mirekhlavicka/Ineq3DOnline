{"name":"Torus\\Beer mug","x0":-1.0,"y0":-1.0,"z0":-1.0,"x1":1.0,"y1":1.0,"z1":1.0,"maxDivisionCount":12,"quality":false,"curvatureQuality":false,"formula":"[advanced]\r\n\r\npublic static IneqTree TorusPQ(double x0, double y0, double z0, double r, double R, double nx, double ny, double nz, double p, double q)\r\n{\r\n\r\n    return new IneqTree((x, y, z) =>\r\n    {\r\n        x = x - x0;\r\n        y = y - y0;\r\n        z = z - z0;\r\n      \r\n        double vp = x * nx + y * ny + z * nz;\r\n\r\n      \tdouble v1 = x - vp * nx;\r\n        double v2 = y - vp * ny;\r\n        double v3 = z - vp * nz;\r\n      \r\n      \tdouble pn = pow(pow(abs(v1), p) + pow(abs(v2), p) + pow(abs(v3), p), 1.0d/p);\r\n      \r\n      \tdouble s1 =  R * v1 / pn;\r\n      \tdouble s2 =  R * v2 / pn;\r\n      \tdouble s3 =  R * v3 / pn;\r\n\r\n\t\tdouble vp1 = sqrt((v1-s1)*(v1-s1) + (v2-s2)*(v2-s2) + (v3-s3)*(v3-s3));\r\n      \r\n      \treturn pow(pow(vp, q) + pow(2*vp1, q), 1.0/q) - r;\r\n\r\n    });\r\n}\r\npublic IneqMesh GetIneqMesh()\r\n{\r\n    var res = new IneqMesh\r\n    {\r\n        X0 = -1.1,\r\n        Y0 = -1.1,\r\n        Z0 = -1.1,\r\n        X1 = 1.5,\r\n        Y1 = 1.1,\r\n        Z1 = 1.1,\r\n        D = 0.1d,\r\n        Boxed = false,\r\n        IneqTree =  (TorusPQ(0.4, 0, 0, 0.2, 0.7, 0, 1, 0, 4, 10) | Cylinder(0, 0 ,-1, 0, 0 ,1, 0.7, 1)) &\r\n          !Cylinder(0, 0 ,-0.9, 0, 0 ,1.1, 0.6, 1)\r\n      };\r\n  \r\n\tres.PrepareBackgroundMeshBeforeApriory = () => \r\n    {\r\n        for (int i = 0; i < 3; i++)\r\n        {\r\n      \t\tres.RefineTetrahedralMesh(0, 2, 0.05, false);\r\n      \t\tres.JiggleBackgroundMash(3);\r\n        }     \r\n    };  \r\n  \r\n\treturn res;  \r\n}\r\n"}