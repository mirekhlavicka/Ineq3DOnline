{"name":"3D models\\Arnold from bottle","x0":-1.0,"y0":-1.0,"z0":-1.0,"x1":1.0,"y1":1.0,"z1":1.0,"maxDivisionCount":12,"quality":false,"curvatureQuality":false,"formula":"[advanced]\r\n\r\npublic  IneqTree Bottle()\r\n{\r\n  \tvar c1 = Cylinder(0, 0 ,-1.4, 0, 0 ,0.7, 0.5, 0.75);\r\n  \tvar c2 = Cylinder(0, 0 ,-1.1, 0, 0 ,1.1, 0.25, 1.0);\r\n  \r\n  \tc1.Transform(delegate(ref double x, ref double y, ref double z) \r\n\t{\r\n\t\tdouble s = 1+(cos(z+1) )/2;      \r\n      \tx /= s; y /= s; \r\n    });\r\n\r\n  \t/*c2.Transform(delegate(ref double x, ref double y, ref double z) \r\n\t{\r\n\t\tdouble s = 1+(cos(z) - cos(1.0))/2;      \r\n      \tx /= s; y /= s; \r\n    });*/\r\n  \r\n  \tvar res = (c1 | c2).ToFunc(0.07);\r\n\r\n\treturn res;\t  \r\n}\r\n\r\npublic IneqMesh GetIneqMesh()\r\n{\r\n  \tvar sdf = new SignedDistance(\"Arnold-Schwarzenegger-busta.stl\");\r\n\tvar f = ((double x, double y,double z) => sdf.From(x, y, z) - 0.01);\r\n  \tvar b = new IneqTree(f) ;  \r\n  \r\n  \tb.Transform(delegate(ref double x, ref double y, ref double z) \r\n\t{\r\n      \tif(z < 1.6)\r\n        {\r\n\t\t\tx *= 2 * (1.6 - z) * (1.6 - z) + 1;          \r\n          \ty *= 2 * (1.6 - z) * (1.6 - z) + 1;\r\n        }\r\n\r\n      \tz -= 1.5;\r\n      \tx -= 0.15;     \r\n    });  \r\n  \r\n    var res = new IneqMesh\r\n    {\r\n        X0 = -1,\r\n        Y0 = -1,\r\n        Z0 = -1.2,\r\n        X1 = 1.2,\r\n        Y1 = 1,\r\n        Z1 = 3,\r\n        D = 0.1,\r\n        Boxed = true,\r\n        IneqTree =\r\n          ((b & !(#z - 0.95)) | Bottle()).ToFunc(0.03)\r\n\t};\r\n  \r\n  \t//res.ProjectToSurfaceSpec[f] = sdf.Project;\r\n\r\n  \tres.PrepareBackgroundMeshBeforeApriory = () => \r\n    {\r\n\r\n      \r\n        for (int i = 0; i < 5; i++)\r\n        {\r\n      \t\tres.RefineTetrahedralMesh(res.IneqTree, 2, 0.03, false, 0);\r\n      \t\tres.JiggleBackgroundMash(3);\r\n        }\r\n      \r\n      \t//res.RefineTetrahedralMesh(0, 1, 0.05);\r\n      \t\r\n    };\r\n  \r\n  \tres.PrepareBackgroundMesh = () => \r\n    {\r\n      \tres.FindCrossEdges(0,2);\r\n      \t//res.FindCrossEdges(0,6);\r\n    };\r\n  \r\n  \treturn res;\r\n  \r\n}"}