{"name":"3D models\\Stretching-cat-with-toy","x0":-1.0,"y0":-1.0,"z0":-1.0,"x1":1.0,"y1":1.0,"z1":1.0,"maxDivisionCount":12,"quality":false,"curvatureQuality":false,"formula":"[advanced]\r\n\r\nprivate SignedDistance sdf = new SignedDistance(\"stretching-cat.stl\");\r\nprivate SignedDistance sdf1 = new SignedDistance(\"SimpleCat.stl\");  \r\n\r\n\r\nprivate IneqTree Creature(SignedDistance which, double x0, double y0, double z0, double s)\r\n{\r\n\tvar b = new IneqTree(which.From);\r\n    \r\n  \tb.Transform(delegate(ref double x, ref double y, ref double z) \r\n    {\r\n\t\tx -= x0;\r\n      \ty -= y0;\r\n      \tz -= z0;\r\n      \r\n      \ty =-y;\r\n      \r\n      \t/*double a = PI / 2;\t\r\n        double x1 = x * cos(a) - y * sin(a);\r\n        double y1 = x * sin(a) + y * cos(a);\r\n        x = x1; y = y1;*/\r\n      \r\n      \tx *= s; y *= s; z *= s;      \t\r\n    });\r\n\t\r\n\treturn b;  \r\n}\r\n\r\npublic IneqMesh GetIneqMesh()\r\n{\r\n\tvar f = ((double x, double y,double z) => sdf.From(x, y, z));\r\n\tvar b = new IneqTree(f) ;\r\n  \tvar smallCat = Creature(sdf1, 0, -0.90, -0.525, 3.25);\r\n  \r\n  \tvar res = new IneqMesh\r\n    {\r\n        X0 = -1,\r\n        Y0 = -1.3,\r\n        Z0 = -1,\r\n        X1 = 1,\r\n        Y1 = 1,\r\n        Z1 = 1,\r\n        D = 0.1d,\r\n        Boxed = true,\r\n        IneqTree =\r\n          b //| Ball(0, -0.95, -0.55, 0.25)\r\n          | smallCat\r\n\t};\r\n  \r\n  \tres.ProjectToSurfaceSpec[f] = sdf.Project;\r\n\r\n  \tres.PrepareBackgroundMeshBeforeApriory = () => \r\n    {\r\n\t\tres.RefineTetrahedralMeshNearPointRedGreen(new Point[]\r\n\t\t{ \r\n          new Point(0, -0.90, -0.525)\r\n\t\t}, 0.25d, 1);      \r\n      \r\n        for (int i = 0; i < 5; i++)\r\n        {\r\n      \t\tres.RefineTetrahedralMesh(0, 1, 0.03, false, 0.1);\r\n      \t\tres.JiggleBackgroundMash(3);\r\n        }\r\n      \r\n      \tres.RefineTetrahedralMesh(1, 3, 0.03, false, 0.0);\t\r\n      \r\n      \t//res.RefineTetrahedralMesh(0, 1, 0.05);\r\n      \t\r\n    };\r\n  \r\n  \t/*res.PrepareBackgroundMesh = () => \r\n    {\r\n      \tres.FindCrossEdges(0,2);\r\n    };*/\r\n  \r\n  \treturn res;\r\n}\r\n"}