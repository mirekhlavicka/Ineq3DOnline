{"name":"3D models\\Simple Cat plus cylinders","x0":-1.0,"y0":-1.0,"z0":-1.0,"x1":1.0,"y1":1.0,"z1":1.0,"maxDivisionCount":12,"quality":false,"curvatureQuality":false,"formula":"[advanced]\r\n\r\nprivate SignedDistance sdf = new SignedDistance(\"SimpleCat.stl\");\r\n\r\npublic IneqTree Cylinders(int count, double r, double d)\r\n{\r\n    IneqTree res = new IneqTree();\r\n\tRandom random = new Random();\r\n  \tList<Point> points = new List<Point>();\r\n  \r\n    for (int i = 0; i < count; i++)\r\n    {\r\n\t\tPoint p = new Point(\r\n          random.NextDouble() * 1.6d - 0.8d, \r\n          random.NextDouble() * 1.6d - 0.8d, \r\n          random.NextDouble() * 1.6d - 0.8d);\r\n\r\n\t\tif(abs(sdf.From(p.X, p. Y, p. Z)) < 0.1d)\r\n        {\r\n\t\t\tsdf.Project(p);\r\n          \tif(!points.Any(p1 => p1.Distance(p) < 3.5d * r))\r\n            {              \r\n\t\t\t\tdouble nx, ny, nz;\r\n              \tGradient(sdf.From, p, out nx, out ny, out nz);\r\n              \r\n              \tpoints.Add(p);\r\n          \t\tres = res | Cylinder(p.X - nx, p.Y - ny, p.Z - nz, p.X + nx, p.Y + ny, p.Z + nz, r, d );\r\n            }              \r\n        }\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\npublic IneqMesh GetIneqMesh()\r\n{\r\n\tvar f = sdf.From;\r\n\tvar b = new IneqTree(f) ;  \r\n\r\n  var res = new IneqMesh\r\n    {\r\n        X0 = -1,\r\n        Y0 = -1,\r\n        Z0 = -1,\r\n        X1 = 1,\r\n        Y1 = 1,\r\n        Z1 = 1,\r\n        D = 0.05,\r\n        Boxed = true,\r\n        IneqTree =\r\n          b | Cylinders(300, 0.08, 0.1)\r\n\t};\r\n  \tres.ProjectToSurfaceSpec[f] = sdf.Project;\r\n  \t//res.PrepareBackgroundMesh = () => res.RefineTetrahedralMeshByTetrahedrons(0, 5, 0.1);\r\n  \r\n  \treturn res;  \r\n}\r\n"}