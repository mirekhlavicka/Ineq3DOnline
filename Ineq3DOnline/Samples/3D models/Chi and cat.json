{"name":"3D models\\Chi and cat","x0":-1.0,"y0":-1.0,"z0":-1.0,"x1":1.0,"y1":1.0,"z1":1.0,"maxDivisionCount":12,"quality":false,"curvatureQuality":false,"formula":"[advanced]\r\n\r\npublic IneqMesh GetIneqMesh()\r\n{\r\n  \tvar sdf = new SignedDistance(\"chi.stl\");\r\n\tvar f = ((double x, double y,double z) => sdf.From(x, y, z));\r\n  \tvar b = new IneqTree(f) ;\r\n  \r\n   \tvar sdf1 = new SignedDistance(\"CatSculpture.stl\");\r\n\tvar f1 = ((double x, double y,double z) => sdf1.From(x, y, z));\r\n  \tvar b1 = new IneqTree(f1) ;\r\n\r\n\tb1.Transform(delegate(ref double x, ref double y, ref double z) \r\n\t{\r\n\r\n      \tx -= 0.72;      \r\n\t\ty += 0.3;\r\n      \r\n      \tx =-x;\t\t\r\n\r\n        double a = -PI/4;\r\n\r\n      \tdouble x1 = x * cos(a) - y * sin(a);\r\n        double y1 =x * sin(a) + y * cos(a);\r\n        x = x1; y = y1;\r\n\r\n      \r\n       z -= 0.01d;      \r\n\r\n      \t//x *= 1.05d; y *= 1.05d; z *= 1.05d;  \r\n    });\r\n  \r\n\tb.Transform(delegate(ref double x, ref double y, ref double z) \r\n\t{\r\n\r\n\r\n        double a = PI/2;\r\n\r\n      \tdouble x1 = x * cos(a) - y * sin(a);\r\n        double y1 =x * sin(a) + y * cos(a);\r\n        x = x1; y = y1;\r\n\r\n      \r\n      //z += 0.7d;      \r\n\r\n      \t//x *= 1.05d; y *= 1.05d; z *= 1.05d;  \r\n    });  \r\n  \r\n  \r\n    var res = new IneqMesh\r\n    {\r\n        X0 = -1,\r\n        Y0 = -1,\r\n        Z0 = -1.1,\r\n        X1 = 2,\r\n        Y1 = 1,\r\n        Z1 = 1.1,\r\n        D = 0.1,\r\n        Boxed = false,\r\n        IneqTree =\r\n          b | b1\r\n\t};\r\n  \r\n  \t//res.ProjectToSurfaceSpec[f] = sdf.Project;\r\n\r\n  \tres.PrepareBackgroundMeshBeforeApriory = () => \r\n    {\r\n      \r\n        for (int i = 0; i < 5; i++)\r\n        {\r\n      \t\tres.RefineTetrahedralMesh(b, 2, 0.03, false, 0.2);\r\n          \tres.RefineTetrahedralMesh(b1, 2, 0.03, false, 0);\r\n      \t\tres.JiggleBackgroundMash(3);\r\n        }\r\n      \r\n      \t//res.RefineTetrahedralMesh(0, 1, 0.05);\r\n      \t\r\n    };\r\n  \r\n  \t/*res.PrepareBackgroundMesh = () => \r\n    {\r\n      \tres.FindCrossEdges(0,2);\r\n      \tres.FindCrossEdges(0,2);\r\n      \t//res.FindCrossEdges(0,6);\r\n    };*/  \r\n  \treturn res;\r\n  \r\n}"}