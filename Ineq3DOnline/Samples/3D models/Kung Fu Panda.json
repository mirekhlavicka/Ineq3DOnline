{"name":"3D models\\Kung Fu Panda","x0":-1.0,"y0":-1.0,"z0":-1.0,"x1":1.0,"y1":1.0,"z1":1.0,"maxDivisionCount":12,"quality":false,"curvatureQuality":false,"formula":"[advanced]\r\n\r\nprivate static SignedDistance sdf = new SignedDistance(\"Kung_Fu_Panda_po.stl\");\r\nprivate static FuncXYZ fPO = ((double x, double y,double z) => sdf.From(x, y, z));\r\n\r\nprivate SignedDistance sdfStar = new SignedDistance(\"ministar.stl\");\r\n\r\nprivate IneqTree Creature(SignedDistance which, double x, double y, double z, double shift, out Point c, bool reflect = false)\r\n{\r\n\tvar b = new IneqTree(which.From);\r\n    \r\n  \tvar p = new Point(x, y, z);\r\n  \tProjectToSurface(p, fPO);\r\n    \r\n  \tGradient(fPO, p, out double nx, out double ny, out double nz);\r\n\r\n    var m = ComputeBasis(nx, ny, nz, 'z');\r\n  \r\n    p.X += shift * nx;\r\n    p.Y += shift * ny;\r\n    p.Z += shift * nz;\r\n  \t\r\n  \tb.Transform(delegate(ref double x, ref double y, ref double z) \r\n    {\r\n\t\tvar d = fPO(x,y,z);\r\n      \tTransform(ref x, ref y, ref z, p, m);\r\n      \tz = d;\r\n\r\n        double a = PI/5;\t\r\n        double x1 = x * cos(a) - y * sin(a);\r\n        double y1 = x * sin(a) + y * cos(a);\r\n        x = x1; y = y1;         \r\n\r\n        /*if(true)\r\n        {\t\t\r\n            a = PI;// + PI/2;\t\r\n            double z1 = z * cos(a) - y * sin(a);\r\n            y1 = z * sin(a) + y * cos(a);\r\n            z = z1; y = y1;      \r\n        }\r\n      \r\n      \tif(reflect)\r\n        {\r\n          x = -x;\t\t\t          \r\n        }*/\r\n      \r\n      \tdouble s = 5.0d;\r\n      \tx *= s; y *= s; z *= s;      \t\r\n    });\r\n\t\r\n  \tc = p;\r\n\treturn b;  \r\n}\r\n\r\n\r\npublic IneqMesh GetIneqMesh()\r\n{\r\n  IneqTree PO = new IneqTree(fPO);\r\n  var star = Creature(sdfStar, -0.4d, -0.9d, 1.0, -0.025d, out Point p1);\r\n\r\n  var res = new IneqMesh\r\n    {\r\n        X0 = -1,\r\n        Y0 = -1,\r\n        Z0 = -1,\r\n        X1 = 1,\r\n        Y1 = 1,\r\n        Z1 = 1,\r\n        D = 0.1d,\r\n        Boxed = false,\r\n        IneqTree =\r\n          PO | star\r\n\t};\r\n  \r\n  \tres.ProjectToSurfaceSpec[fPO] = sdf.Project;\r\n  \tres.PrepareBackgroundMeshBeforeApriory = () => \r\n    {\r\n\t\tres.RefineTetrahedralMeshNearPointRedGreen(new Point[]\r\n\t\t{ \r\n          p1,\r\n\t\t}, 0.3d, 2);      \r\n        for (int i = 0; i < 4; i++)\r\n        {\r\n      \t\tres.RefineTetrahedralMesh(0, 4, 0.015);\r\n      \t\tres.JiggleBackgroundMash(3);\r\n        }\r\n      \r\n      \tres.RefineTetrahedralMesh(0, 2, 0.015);\r\n      \t\r\n      \tres.RefineTetrahedralMesh(1, 3, 0.02);\r\n    };\r\n  \r\n  \treturn res;\r\n}\r\n"}