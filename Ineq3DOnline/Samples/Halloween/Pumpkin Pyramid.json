{"name":"Halloween\\Pumpkin Pyramid","x0":-1.0,"y0":-1.0,"z0":-1.0,"x1":1.0,"y1":1.0,"z1":1.0,"maxDivisionCount":12,"quality":false,"curvatureQuality":false,"formula":"[advanced]\r\n\r\nList<Point> points = new List<Point>();\r\n\r\npublic static IneqTree Planes(int count)\r\n{\r\n    IneqTree res = new IneqTree();\r\n\r\n    for (int i = 0; i < count; i++)\r\n    {\r\n        double x0 = 0.08d * Math.Cos(PI/10 + i * 2 * Math.PI / count);\r\n        double y0 = 0.08d * Math.Sin(PI/10 + i * 2 * Math.PI / count);\r\n        double z0 = 0;\r\n\r\n        res = res & ((x, y, z) => (x - x0) * x0 + (y - y0) * y0 + (z - z0) * z0);\r\n    }\r\n\r\n  \tres = res & (# -z);\r\n  \tres = res & (# z - 1.15);\r\n  \r\n  \tres.Transform(delegate(ref double x, ref double y, ref double z)\r\n\t{\r\n      \tdouble f = 1 +  2*(1.1-z);\r\n      \r\n\t\tx /= f;\r\n      \ty /= f;\r\n       \r\n    });\r\n  \r\n    return res;\r\n}\r\n\r\npublic IneqTree Pumpkin(double x0,double y0,double z0,double r, double a0)\r\n{\r\n  \tvar b = Ball(0,0,0,1);\r\n  \r\n\tb.Transform(delegate(ref double x, ref double y, ref double z) \r\n\t{\r\n      \tdouble a = atan2(x, y);\r\n      \tdouble f = 0.75 + IneqTree.IneqNode.SmoothAbs(sin(6*(a - a0)), 0.4)/6 + (1-z)/6;\r\n\t\tx /= f;\r\n      \ty /= f;\r\n    });\r\n  \r\n\tb.Transform(delegate(ref double x, ref double y, ref double z) \r\n\t{      \r\n      \tdouble r = 3 * sqrt(x*x + y*y);\r\n      \tz = z * (1+exp(-r*r)/3);\r\n    });   \r\n  \r\n  \tb = b | Planes(5);\r\n  \r\n\tb.Transform(delegate(ref double x, ref double y, ref double z) \r\n\t{      \r\n\t\tx -= x0; y -= y0; z -= z0;      \r\n      \tx /=r; y /=r; z /=r;\r\n    });  \r\n\r\n\r\n\tPoint p = new Point(x0, y0, z0 - r);  \r\n\r\n  \tpoints.Add(p);\r\n      \r\n  \treturn b;\r\n}\r\n\r\npublic IneqTree Pumpkins(double z0, double r, int count)\r\n{\r\n\tvar res = new IneqTree();\r\n\r\n  \tdouble d = 1.7 * r;\r\n  \r\n  \tdouble x0 =  - d * count /2;\r\n  \tdouble y0 =  - d * count /2;\r\n  \tdouble a0  = 0;\r\n  \r\n\tfor(int j=0; j < count; j++)\r\n  \tfor(int i=0; i < count; i++)\r\n    {\r\n\t\tif(i==0 || j==0 || i==count-1 || j==count-1)\r\n      \t\tres = res | Pumpkin(x0 + i*d, y0 + j * d, z0, r, (i+j) * PI /12);\r\n      \t//x0 += d;\r\n      \t//a0 += PI/12;\r\n    }\r\n  \t\r\n  \treturn res;\r\n}  \r\n\r\npublic IneqMesh GetIneqMesh()\r\n{\r\n  \r\n    var res = new IneqMesh\r\n    {\r\n        X0 = -1.0,\r\n        Y0 = -1.0,\r\n        Z0 = -0.5,\r\n        X1 = 1.0,\r\n        Y1 = 1.0,\r\n        Z1 = 0.8,\r\n        D = 0.05d,\r\n        Boxed = false,\r\n        IneqTree =\r\n\t\t  Pumpkins(-0.25, 0.2, 4) |\r\n          Pumpkins(0, 0.2, 3) |\r\n          Pumpkins(0.25, 0.2, 2) |\r\n          Pumpkins(0.5, 0.2, 1)\r\n\t};\r\n  \r\n\tres.PrepareBackgroundMeshBeforeApriory = () => \r\n    {\r\n\t\tres.RefineTetrahedralMeshNearPointRedGreen(points, 0.05, 2);     \r\n    };      \r\n  \r\n  \treturn res;\r\n}\r\n"}