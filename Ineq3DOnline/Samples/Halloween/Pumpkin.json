{"name":"Halloween\\Pumpkin","x0":-1.0,"y0":-1.0,"z0":-1.0,"x1":1.0,"y1":1.0,"z1":1.0,"maxDivisionCount":12,"quality":false,"curvatureQuality":false,"formula":"[advanced]\r\n\r\npublic static IneqTree Planes(int count)\r\n{\r\n    IneqTree res = new IneqTree();\r\n\r\n    for (int i = 0; i < count; i++)\r\n    {\r\n        double x0 = 0.03d * Math.Cos(i * 2 * Math.PI / count);\r\n        double y0 = 0.03d * Math.Sin(i * 2 * Math.PI / count);\r\n        double z0 = 0;\r\n\r\n        res = res & ((x, y, z) => (x - x0) * x0 + (y - y0) * y0 + (z - z0) * z0);\r\n    }\r\n\r\n  \tres = res & (# -z);\r\n  \tres = res & (# z - 0.8);\r\n  \r\n  \tres.Transform(delegate(ref double x, ref double y, ref double z)\r\n\t{\r\n      \tdouble f = 1 +  2*(1.2-z)*(1.2-z);\r\n      \r\n\t\tx /= f;\r\n      \ty /= f;\r\n       \r\n    });\r\n\r\n\tres.Transform(delegate(ref double x, ref double y, ref double z) \r\n\t{\r\n\t\tdouble x0 = 0.6;\r\n      \r\n      \tif(x > x0)\r\n        {\r\n\t\t\tx = x0;          \r\n        }          \r\n      \r\n      \tdouble r = sqrt(z*z + (x-x0)*(x-x0));\r\n      \tdouble a = atan2(z, x-x0);\r\n      \r\n      \tx = x0 - r;\r\n      \tz = (a < 0 ? -(a + PI) : (PI - a)) * x0;    \t\r\n    });   \r\n  \r\n\tres.Transform(delegate(ref double x, ref double y, ref double z) \r\n\t{\r\n      \t//x += 0.12;\r\n      \tz -= 0.7;\r\n    });\r\n  \r\n    return res;\r\n}\r\n\r\npublic IneqMesh GetIneqMesh()\r\n{\r\n   \t//var sdf = new SignedDistance(\"earth.stl\");\r\n\t//var f = sdf.From;//((double x, double y,double z) => x*x + y*y + z*z -1 );\r\n  \tvar b = Ball(0,0,0,1);\r\n  \r\n\tb.Transform(delegate(ref double x, ref double y, ref double z) \r\n\t{\r\n      \tdouble a = atan2(x, y);\r\n      \tdouble f = 0.75 + IneqTree.IneqNode.SmoothAbs(sin(6*a), 0.2)/6 + (1-z)/6;\r\n      \r\n\t\tx /= f;\r\n      \ty /= f;\r\n    });\r\n  \r\n\tb.Transform(delegate(ref double x, ref double y, ref double z) \r\n\t{      \r\n      \tdouble r = 3 * sqrt(x*x + y*y);\r\n      \r\n      \tz = z * (1+exp(-r*r)/3);\r\n      \r\n    });   \r\n  \r\n    var res = new IneqMesh\r\n    {\r\n        X0 = -1.5,\r\n        Y0 = -1.5,\r\n        Z0 = -1.1,\r\n        X1 = 1.5,\r\n        Y1 = 1.5,\r\n        Z1 = 1.3,\r\n        D = 0.05d,\r\n        Boxed = false,\r\n        IneqTree =\r\n          b |\r\n          Planes(6)//.ToFunc(0.001)\r\n\t};\r\n  \r\n  \t//res.PrepareBackgroundMeshBeforeApriory = () => res.RefineTetrahedralMesh(0, 10, 0.1);\r\n  \r\n  \treturn res;\r\n}\r\n"}